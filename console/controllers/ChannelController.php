<?php
namespace console\controllers;

use common\models\music\SalesChannel;
use common\models\music\UserShare;
use common\models\music\WechatClass;
use common\models\music\WechatClassShareStat;
use common\widgets\Request;
use common\widgets\TemplateBuilder;
use console\models\channel\BusinessStatistics;
use console\models\channel\UserInit;
use console\models\channel\User;
use console\models\channel\ClassRoom;
use console\models\channel\ProductOrder;
use console\models\channel\SalesTrade;
use console\models\channel\SalesArticleShare;
use console\models\channel\ChannelChatWait;
use console\models\channel\WaitStatistics;
use yii\console\Controller;
use Yii;

use common\widgets\Queue;

/**
 * Channel controller
 */
class ChannelController extends Controller
{
    /**
     * @inheritdoc
     */
    public function actions()
    {
        return [
            'error' => [
                'class' => 'yii\web\ErrorAction',
            ],
        ];
    }

    public function beforeAction($action)
    {
        return parent::beforeAction($action); // TODO: Change the autogenerated stub
    }

    public function afterAction($action, $result)
    {
        return parent::afterAction($action, $result); // TODO: Change the autogenerated stub
    }
    
    public function init()
    {
    }
    /*
     * 统计（定时脚本十分钟）当前时间未接待的人数
     * create by sjy
     * 2017-06-15
     */
    public function actionWaitStatistics()
    {
         $num = ChannelChatWait::find()
                 ->count();
         $WaitStatistics = new WaitStatistics();
         $WaitStatistics->create_time = time();
         $WaitStatistics->num = $num;
         $WaitStatistics->save();
    }

    /**
     * 定时更新渠道临时二维码
     * @author Yrxin
     * @DateTime 2017-08-11T11:25:21+0800
     * @return   [type]                   [description]
     */
    public function actionChannelRetempQrcode()
    {
        //跟新的时间依据
        $update_time = time() - 86400*10;
        $result = SalesChannel::find()
                ->select("id")
                ->where("status = 1 AND subscribe = '1' AND reqrcode_time>0 AND (reqrcode_time < $update_time OR weicode_path = '')")
                ->asArray()
                ->all();
        if ($result) {
            foreach ($result as $value) {
                $arr = [
                    'id'=> $value['id'],
                ];
                Queue::produce($arr, 'async', 'channel_retemp_qrcode');
            }
        }
    }

    /**
     * @created by Jhu
     * 发送预约直播课用户模版消息
     * 每晚8点半
     */
    public function actionBookedRemindNight()
    {
        //获取明天的直播课
        $starttime = strtotime(date("Y-m-d", time())) + 86400;
        $endtime = $starttime + 86400;
        $classinfo = WechatClass::find()
            ->select('class_time, teacher_name, title, id')
            ->where('class_time >= :starttime AND class_time < :endtime AND is_back = 0 AND is_delete = 0', [
                ':starttime' => $starttime,
                ':endtime' => $endtime
            ])
            ->asArray()
            ->all();

        $messageList = [];
        for ($i = 0; $i < count($classinfo); $i++) {
            //获取当前直播课的预约用户的openid
            $getShareuser = UserShare::find()
                ->alias('s')
                ->select('open_id, wechat_name')
                ->leftJoin('sales_channel AS c', 'c.bind_openid = s.open_id')
                ->where('s.class_id = :class_id AND s.is_back_share = 0 AND c.status = 1 AND c.subscribe = "1"', [
                    ':class_id' => $classinfo[$i]["id"]
                ])
                ->groupBy('open_id')
                ->asArray()
                ->all();

            if (!empty($getShareuser)) {
                //发送模板给预约本节课的用户
                for ($j = 0; $j < count($getShareuser); $j++) {
                    //定义消息消息模板
                    $param = array(
                        'template_id' => Yii::$app->params['channel_template_class_success'],
                        'firstValue' => ['value' =>'您有一节直播课，明晚开课', 'color' => '#ff0000'],
                        'key1word' => '《' . $classinfo[$i]["title"] . '》' . "\n",
                        'key2word' => date("Y-m-d H:i:s", $classinfo[$i]["class_time"])."\n",
                        'remark' => ['value' =>'请您合理安排时间，课程开始前15分钟直播课地址将推送给您', 'color' => '#ff0000'],
                        'url' => '',
                        'keyword_num' => 2
                    );
                    //将要发送的消息模板放到消息数组中
                    $messageList[] = TemplateBuilder::buildTemplate($param, (string)$getShareuser[$j]["open_id"]);
                }
            }
        }

        if (!empty($messageList)) {
            //将要发送的内容发送到队列中
            Queue::batchProduce($messageList, 'template', 'channel_template_last_night');
        }
    }

    /**
     * @created by Jhu
     * 15分钟前提醒参加微课
     * 每分钟执行
     */
    public function actionBookedRemindAttend()
    {
        //获取今天的直播课
        $classinfo = WechatClass::find()
            ->select('class_time, teacher_name, title, id, url')
            ->where('class_time <= :starttime AND is_back = 0 AND is_send = 0 AND is_delete = 0', [
                ':starttime' => time() + 15 * 60
            ])
            ->asArray()
            ->all();

        $messageList = [];
        for ($i = 0; $i < count($classinfo); $i++) {
            //将课程标记为已发送
            $sql = 'UPDATE wechat_class SET is_send = 1 WHERE id = :id';
            Yii::$app->db->createCommand($sql)
                ->bindValue(':id', $classinfo[$i]["id"])
                ->execute();

            //获取当前直播课的预约用户的openid
            $getShareuser = UserShare::find()
                ->alias('s')
                ->select('open_id, wechat_name')
                ->leftJoin('sales_channel AS c', 'c.bind_openid = s.open_id')
                ->where('s.class_id = :class_id AND s.is_back_share = 0 AND c.status = 1 AND c.subscribe = "1"', [
                    ':class_id' => $classinfo[$i]["id"]
                ])
                ->groupBy('s.open_id')
                ->asArray()
                ->all();

            if (!empty($getShareuser)) {
                //发送模板给预约本节课的用户
                for ($j = 0; $j < count($getShareuser); $j++) {
                    //定义消息消息模板
                    $param = array(
                        'template_id' => Yii::$app->params['channel_template_class_success'],
                        'firstValue' => ['value' =>'直播课即将开始', 'color' => '#ff0000'],
                        'key1word' => '《' . $classinfo[$i]["title"] . '》' . "\n",
                        'key2word' => date("Y-m-d H:i:s", $classinfo[$i]["class_time"]). "\n",
                        'remark' => ['value' =>'点击立即进入直播课堂', 'color' => '#ff0000'],
                        'url' => Yii::$app->params['channel_frontend_url'].'liveshow/'.$classinfo[$i]['id'].'?type=7',
                        'keyword_num' => 2
                    );
                    //将要发送的消息模板放到消息数组中
                    $messageList[] = TemplateBuilder::buildTemplate($param, $getShareuser[$j]["open_id"]);
                }
            }
        }

        if (!empty($messageList)) {
            //将要发送的内容发送到队列中
            Queue::batchProduce($messageList, 'template', 'channel_template_last_night');
        }
    }

    /**
     * 每天0点跑，统计0点以前所有拉新关注
     * @author Yrxin
     * @DateTime 2017-12-15T14:01:05+0800
     * @return   [type]                   [description]
     */
    public function actionShareStat()
    {
        //需要统计的时间点 减10秒避免时间误差
        $stat_time = time()-10;
        $stat_date = date("Ymd", $stat_time);
        //当前的时间点 +10秒避免时间误差
        $real_time = time()+10;
        $real_date = date("Ymd", $real_time);
        $is_runed = WechatClassShareStat::find()->select('id')
            ->where('created_time =:created_time', [
                ':created_time'=>strtotime($stat_date)
            ])
            ->one();
        if ($is_runed) {
            return '脚本已执行';
        }
        //查找需要跑的数据
        $wechat_class = WechatClass::find()
            ->select('id,class_time')
            ->where('is_delete = 0 AND is_disable = 0')
            ->andWhere(['>', 'class_time', strtotime('20170601')])
            ->asArray()
            ->all();
        //构造数据
        foreach ($wechat_class as $v) {
            $key_value[$v['id']] = $v['class_time'];
            $class_id[] = $v['id'];
        }
        if ($class_id) {
            $user_share = UserShare::find()
                ->select('class_id,count(0) share_num,SUM(click_num) click_num,SUM(pull_num) pull_num')
                ->where(['IN', 'class_id', $class_id])
                ->groupBy('class_id')
                ->asArray()
                ->all();
            if ($user_share) {
                foreach ($user_share as $key => $value) {
                    if (isset($key_value[$value['class_id']])) {
                        //上课时间
                        $class_time = date("Ymd", $key_value[$value['class_id']]);
                        $user_share[$key]['is_back_share'] = $real_date>$class_time?1:0;
                        $user_share[$key]['created_time'] = strtotime($stat_date);
                        $user_share[$key]['key'] = 'ClassStat';
                        Queue::produce($user_share[$key], 'async', 'channel_statis');
                    }
                }
            }
        }
    }
}
